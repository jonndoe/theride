image: docker:stable

stages:
  - build
  - lint
  - test


variables:
  IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}
  POSTGRES_USER: 'theride'
  POSTGRES_PASSWORD: ''
  POSTGRES_DB: 'test_theride'
  POSTGRES_HOST_AUTH_METHOD: trust
  
build:
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:latest || true
    - docker build
        --cache-from $IMAGE:latest
        --tag $IMAGE:latest
        --file ./compose/production/django/Dockerfile
        "."
    - docker push $IMAGE:latest

flake8:
  stage: lint
  image: python:3.9-alpine
  before_script:
    - pip install -q flake8
  script:
    - flake8

pytest:
  stage: test
  image: docker/compose:latest
  tags:
    - docker
  services:
    - docker:dind
  before_script:
    - docker-compose -f local.yml build
    # Ensure celerybeat does not crash due to non-existent tables
    - docker-compose -f local.yml run --rm django python manage.py migrate
    - docker-compose -f local.yml up -d
  script:
    - docker-compose -f local.yml run django pytest

